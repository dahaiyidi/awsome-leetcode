## Problem

#### [108. 将有序数组转换为二叉搜索树](https://leetcode-cn.com/problems/convert-sorted-array-to-binary-search-tree/)

简单

给你一个整数数组 `nums` ，其中元素已经按 **升序** 排列，请你将其转换为一棵 **高度平衡** 二叉搜索树。

**高度平衡** 二叉树是一棵满足「每个节点的左右两个子树的高度差的绝对值不超过 1 」的二叉树。

 

------

### Note

- 二分查找与二叉搜索树本质上是一样的。不能说是二分查找，因为二分查找是双指针的方法。而此类的题目属于分治，只不过每一次分开往往是从1/2处开始分开解决。

------

### Complexity

- 时间O：n
- 空间O：logn

------

### Python

```python

```

### C++

```C++

class Solution {
public:
    TreeNode* fun(vector<int>& nums, int left, int right)
    {
        if(left > right)
        {
            return nullptr;
        }
        if(left == right)
        {
            return new TreeNode(nums[left]);
        }
        int mid = left + ((right - left) >> 1);
        TreeNode* root = new TreeNode(nums[mid]);
        root->left = fun(nums, left, mid - 1);
        root->right = fun(nums, mid + 1, right);
        return root; 
    }
    TreeNode* sortedArrayToBST(vector<int>& nums) {
        // 二分查找与本质上就是二叉搜索树
        return fun(nums, 0, nums.size() - 1);
    }
};
```



From : https://github.com/dahaiyidi/awsome-leetcode
